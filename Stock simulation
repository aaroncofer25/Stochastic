{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOOjPtj2ubG0rDHB0a7Mnv0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aaroncofer25/Stochastic/blob/main/Stock%20simulation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "aUOchfzGImft",
        "outputId": "8074e3fa-3e46-4a7e-de50-9cfc8966a61a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-50.0, 50.0)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "\n",
        "rand_numbers = []\n",
        "next_step = []\n",
        "x = []\n",
        "count = 0\n",
        "initial_point = 10\n",
        "final = 0\n",
        "state = []\n",
        "s = 0\n",
        "\n",
        "for i in range(1000):\n",
        "  i = random.uniform(0,1)\n",
        "  rand_numbers.append(i)\n",
        "  x.append(i)\n",
        "\n",
        "for i in range(1000):\n",
        "  if rand_numbers[i] < 0.5:\n",
        "    next_step.append(1)\n",
        "  else:\n",
        "    next_step.append(-1)\n",
        "  if next_step[i] == 1:\n",
        "    count = count + 1\n",
        "  s = s + next_step[i]\n",
        "  state.append(s)\n",
        "\n",
        "for i in range(1000):\n",
        "  final = final + next_step[i]\n",
        "\n",
        "plt.plot(state)\n",
        "plt.ylim(-50, 50)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next_step"
      ],
      "metadata": {
        "id": "JhSlC2HMLCd-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}